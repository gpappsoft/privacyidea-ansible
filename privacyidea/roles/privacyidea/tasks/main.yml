---
# - name: Set OS distribution dependent variables
#   include_vars: "group_vars/{{ ansible_facts['distribution'] }}.yml"
#   tags: always
  
- include_tasks: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution }}.yml"
  tags: always

- name: set unpriviliged ports
  ansible.posix.sysctl:
    name: net.ipv4.ip_unprivileged_port_start
    value: '0'
    state: present
  tags: always

- name: Set current username as fact
  become: false
  set_fact:
      pi_user: "{{ lookup('env', 'USER') }}"
  tags: always

- name: Set current home path as fact
  become: false
  set_fact:
      pi_home: "{{ lookup('env', 'HOME') }}"
  tags: always

- name: Ensure group "docker" exists
  group:
    name: docker
    state: present
  tags: always

- name: Adding existing user '{{ pi_user }}' to group docker
  user:
    name: '{{ pi_user }}'
    groups: docker
    append: yes
  tags: always

- name: Create directory for privacyidea docker files
  become: false
  file:
    path: "{{ pi_home }}/{{ item }}"
    state: directory
    mode: '0750'
  with_items:
  - "{{ pidockerdir }}"
  - "{{ pidockerdir }}/templates"
  - "{{ pidockerdir }}/scripts"
  tags: always

- name: Copy environment file
  become: false
  copy:
    src: "roles/privacyidea/files/environment.env"
    dest: "{{ pi_home }}/{{ pidockerdir }}/"
    owner: "{{ pi_user }}"
    mode: '0644'
    force: false
  tags: always  

- name: Find template files to copy
  find:
    paths: roles/privacyidea/files/templates/
    patterns: "*"
  register: files_to_copy
  delegate_to: localhost

- name: Copy template files to remote host
  become: false
  copy:
    src: "{{ item.path }}"
    dest: "{{ pi_home }}/{{ pidockerdir }}/templates/{{ item.path | basename }}"
  loop: "{{ files_to_copy.files }}"
  when: files_to_copy.matched > 0

- name: Check if docker-compose.yml exists 
  stat:
    path: "roles/privacyidea/files/docker-compose.yml"
  register: dockercompose
  delegate_to: localhost
  tags: always

- name: Download docker-compose.yml
  become: false
  get_url:
    url: https://raw.githubusercontent.com/gpappsoft/privacyidea-docker/refs/heads/main/docker-compose.yaml
    dest: "{{ pi_home }}/{{ pidockerdir }}/"
    mode: '0640'
  when: not dockercompose.stat.exists
  tags: always

- name: Copy docker-compose.yml
  become: false
  copy:
    src: "roles/privacyidea/files/docker-compose.yml"
    dest: "{{ pi_home }}/{{ pidockerdir }}/"
    owner: "{{ pi_user }}"
    mode: '0644'
  when: dockercompose.stat.exists
  tags: always  

- name: Generate a random secret
  set_fact:
    pi_secret: "{{ lookup('ansible.builtin.password', '/dev/null', length=32, chars=['ascii_letters', 'digits']) }}"
    pi_pepper: "{{ lookup('ansible.builtin.password', '/dev/null', length=32, chars=['ascii_letters', 'digits']) }}"
    db_password: "{{ lookup('ansible.builtin.password', '/dev/null', length=32, chars=['ascii_letters', 'digits']) }}"
    admin_password: "{{ lookup('ansible.builtin.password', '/dev/null', length=32, chars=['ascii_letters', 'digits']) }}"
  tags: always

- name: Generate privacyIDEA enckey
  shell: (openssl rand 96 |  base64 -w 0)
  register: enckey_result
  tags: always

- name: Set new secrets in environment file
  lineinfile:
    path: "{{ pi_home }}/{{ pidockerdir }}/environment.env"
    state: present
    regexp: "^{{ item.key }}=beChangedByAnsible$"
    line: "{{ item.key }}={{ item.value}}"
  with_items: 
  - key: PI_PEPPER
    value: "{{ pi_pepper }}"
  - key: PI_SECRET
    value: "{{ pi_secret }}"
  - key: DB_PASSWORD
    value: "{{ db_password }}"
  - key: PI_ADMIN_PASS
    value: "{{ admin_password }}"
  - key: PI_ENCKEY
    value: "{{ enckey_result.stdout }}"
  tags: always

- name: Check if certificate already exists
  stat:
    path: "{{ pi_home }}/{{ pidockerdir }}/templates/pi.pem"
  register: cert_result
  tags: always
  
- name: Create private key (RSA, 4096 bits)
  community.crypto.openssl_privatekey:
    path: "{{ pi_home }}/{{ pidockerdir }}/templates/pi.key"
  when: not cert_result.stat.exists
  tags: always

- name: Create simple self-signed certificate
  community.crypto.x509_certificate:
    path: "{{ pi_home }}/{{ pidockerdir }}/templates/pi.pem"
    privatekey_path: "{{ pi_home }}/{{ pidockerdir }}/templates/pi.key"
    provider: selfsigned
  when: not cert_result.stat.exists
  tags: always

- name: Tear down existing privacyIDEA stack
  community.docker.docker_compose_v2:
    project_src: "/home/{{ pi_user }}/{{ pidockerdir }}/"
    env_files: "/home/{{ pi_user }}/{{ pidockerdir }}/environment.env"
    services: "{{ dockerservices }}"
    state: absent
  tags: always

- name: Create and start privacyIDEA stack
  community.docker.docker_compose_v2:
    project_src: "/home/{{ pi_user }}/{{ pidockerdir }}/"
    env_files: "/home/{{ pi_user }}/{{ pidockerdir }}/environment.env"
    pull: missing
    recreate: always
    services: "{{ dockerservices }}"
  register: output
  tags: always